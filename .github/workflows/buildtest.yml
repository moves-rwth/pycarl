name: Build Test
# Builds and tests pycarl on different Linux systems

on:
  push:
    branches:
      - master
  schedule:
    # run weekly
    - cron: '0 10 * * 3'
  # needed to trigger the workflow manually
  workflow_dispatch:
  pull_request:

env:
  GIT_URL: "${{ github.server_url }}/${{ github.repository }}.git"
  BRANCH: "${{ github.ref }}"
  # github runners currently have two cores
  NR_JOBS: "2"

  CARL_PARSER_GIT_URL: "https://github.com/ths-rwth/carl-parser"
  CARL_PARSER_BRANCH: "master14"
  CARL_GIT_URL: "https://github.com/ths-rwth/carl"
  CARL_BRANCH: "master14"

  CMAKE_DEBUG: "-DCMAKE_BUILD_TYPE=Debug"
  CMAKE_RELEASE: "-DCMAKE_BUILD_TYPE=Release"
  CARL_CMAKE_DEBUG: "-DCMAKE_BUILD_TYPE=Debug -DUSE_CLN_NUMBERS=ON -DUSE_GINAC=ON -DTHREAD_SAFE=ON"
  CARL_CMAKE_RELEASE: "-DCMAKE_BUILD_TYPE=Release -DUSE_CLN_NUMBERS=ON -DUSE_GINAC=ON -DTHREAD_SAFE=ON"

  DOCUMENTATION_DISTRO: "ubuntu-20.04"

jobs:
  noDeploy:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      PYTHON: "python3"
    strategy:
      matrix:
        distro: ["ubuntu-21.10", "ubuntu-20.04", "debian-10", "debian-11"]
        debugOrRelease: ["debug", "release"]

    steps:
      - name: Setup environment variables
        # this is strangely the best way to implement environment variables based on the value of another
        # GITHUB_ENV is a magic variable pointing to a file; if a line with format {NAME}={VALUE}
        # then the env variable with name NAME will be created/updated with VALUE
        run: |
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "CMAKE_ARGS=${CMAKE_DEBUG}" || echo "CMAKE_ARGS=${CMAKE_RELEASE}") >> $GITHUB_ENV
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "CARL_CMAKE_ARGS=${CARL_CMAKE_DEBUG}" || echo "CARL_CMAKE_ARGS=${CARL_CMAKE_RELEASE}") >> $GITHUB_ENV
          ([[ ${{ matrix.debugOrRelease }} == "debug" ]] && echo "DEBUG_SWITCH=--debug" || true) >> $GITHUB_ENV
      - name: Init Docker
        run: sudo docker run -d -it --name ci --privileged movesrwth/storm-basesystem:${{ matrix.distro }}
        # We should not do partial updates :/
        # but we need to install some dependencies
        # Surely we can find a better way to do this at some point
      - name: Update base system
        run: |
          sudo docker exec ci apt-get update
          sudo docker exec ci apt-get upgrade -qqy
      - name: install dependencies
        run: sudo docker exec ci apt-get install -qq -y maven uuid-dev libeigen3-dev python3 python3-venv
      - name: Git clone
        run: |
          # git clone cannot clone individual commits based on a sha and some other refs
          # this workaround fixes this and fetches only one commit
          sudo docker exec ci bash -c "mkdir /opt/pycarl; cd /opt/pycarl; git init && git remote add origin ${GIT_URL} && git fetch --depth 1 origin ${BRANCH} && git checkout FETCH_HEAD"
          sudo docker exec ci git clone --depth 1 --branch $CARL_BRANCH $CARL_GIT_URL /opt/carl
          sudo docker exec ci git clone --depth 1 --branch $CARL_PARSER_BRANCH $CARL_PARSER_GIT_URL /opt/carl-parser

      - name: Run cmake for carl
        run: sudo docker exec ci bash -c "mkdir /opt/carl/build; cd /opt/carl/build; cmake .. ${CARL_CMAKE_ARGS}"
      - name: Build carl
        run: sudo docker exec ci bash -c "cd /opt/carl/build; make lib_carl -j ${NR_JOBS}"

      - name: Run cmake for carl-parser
        run: sudo docker exec ci bash -c "mkdir /opt/carl-parser/build; cd /opt/carl-parser/build; cmake .. ${CMAKE_ARGS}"
      - name: make carl-parser
        run: sudo docker exec ci bash -c "cd /opt/carl-parser/build; make -j ${NR_JOBS}"

      - name: Setup virtualenv
        run: |
          sudo docker exec ci bash -c "cd /opt; ${PYTHON} -m venv pycarl-env; source pycarl-env/bin/activate; python --version"
      - name: Build pycarl
        run: |
          sudo docker exec ci bash -c "cd /opt; source pycarl-env/bin/activate; cd /opt/pycarl; python setup.py build_ext $DEBUG_SWITCH -j ${NR_JOBS} develop"
      - name: Run tests
        run: |
          sudo docker exec ci bash -c "cd /opt; source pycarl-env/bin/activate; cd /opt/pycarl; python setup.py test"

        # build and publish documentation
      - name: Install documentation dependencies
        if: matrix.debugOrRelease == 'release' && matrix.distro == env.DOCUMENTATION_DISTRO
        run: sudo docker exec ci bash -c "cd /opt; source pycarl-env/bin/activate; cd pycarl; pip install sphinx sphinx_bootstrap_theme"
      - name: Build documentation
        if: matrix.debugOrRelease == 'release' && matrix.distro == env.DOCUMENTATION_DISTRO
        run: |
          sudo docker exec ci bash -c "cd /opt; source pycarl-env/bin/activate; cd pycarl/doc; make html"
          sudo docker exec ci rm -r /opt/pycarl/doc/build/html/_sources
          sudo docker cp ci:/opt/pycarl/doc/build/html .
      - name: Deploy documentation
        # Only deploy for release version and using master on original repo (and not for pull requests or forks)
        if: matrix.debugOrRelease == 'release' && matrix.distro == env.DOCUMENTATION_DISTRO && github.repository_owner == 'moves-rwth' && github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./html

  notify:
    name: Email notification
    runs-on: ubuntu-latest
    needs: [noDeploy]
    # Only run in main repo and even if previous step failed
    if: github.repository_owner == 'moves-rwth' && always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: dawidd6/action-send-mail@v2
        with:
          server_address: ${{ secrets.STORM_CI_MAIL_SERVER }}
          server_port: 587
          username: ${{ secrets.STORM_CI_MAIL_USERNAME }}
          password: ${{ secrets.STORM_CI_MAIL_PASSWORD }}
          subject: "[You broke it] CI run failed for ${{ github.repository }}"
          body:
            "CI job of ${{ github.repository }} has failed for commit ${{ github.sha }}.\n\
            The error type is: ${{ env.WORKFLOW_CONCLUSION }}.\n\n\
            For more information, see https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          to: ${{ secrets.STORM_CI_MAIL_RECIPIENTS }}
          from: Github Actions <you-broke-it@stormchecker.org>
        if: env.WORKFLOW_CONCLUSION != 'success' # notify only if failure

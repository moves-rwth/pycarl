Search.setIndex({"docnames": ["api", "api/convert", "api/core", "api/formula", "api/parse", "getting_started", "index", "installation"], "filenames": ["api.rst", "api/convert.rst", "api/core.rst", "api/formula.rst", "api/parse.rst", "getting_started.rst", "index.rst", "installation.rst"], "titles": ["Pycarl API Reference", "Pycarl convert", "Pycarl core", "Pycarl formula", "Pycarl parse", "Getting Started", "Welcome to pycarl\u2019s documentation!", "Installation"], "terms": {"work": [0, 6, 7], "progress": [0, 6, 7], "core": [0, 6, 7], "number": [0, 5, 6, 7], "independ": [0, 6], "type": [0, 1, 5, 6], "depend": [0, 6], "gmp": [0, 1, 5, 6], "cln": [0, 1, 5, 6, 7], "convert": [0, 6], "convers": [0, 6], "formula": [0, 6], "pars": [0, 2, 6, 7], "convert_to_cln": 1, "data": 1, "param": 1, "structur": 1, "return": [1, 2, 4], "convert_to_gmp": 1, "class": [2, 3], "boundtyp": 2, "member": [2, 3], "strict": 2, "weak": 2, "infti": 2, "2": [2, 3, 5, 7], "0": [2, 3], "1": [2, 3, 5], "properti": [2, 3], "name": [2, 3], "valu": [2, 3], "monomi": 2, "expon": 2, "tdeg": 2, "except": [2, 4], "nopicklingsupport": 2, "variabl": [2, 5], "id": 2, "is_no_vari": 2, "rank": 2, "variabletyp": 2, "bool": [2, 3], "int": 2, "real": 2, "carl_vers": 2, "get": [2, 3, 6, 7], "carl": [2, 6, 7], "version": [2, 7], "clear_monomial_pool": 2, "none": 2, "clear": 2, "pool": 2, "remov": 2, "all": [2, 7], "clear_pool": 2, "clear_variable_pool": [2, 5], "create_monomi": 2, "creat": [2, 5, 7], "has_cln": 2, "check": 2, "ha": 2, "support": [2, 7], "true": [2, 3], "iff": [2, 3], "i": [2, 4, 6, 7], "has_pars": 2, "print_info": 2, "print": [2, 5], "inform": 2, "about": 2, "variable_with_nam": 2, "arg0": 2, "str": [2, 3], "from": [2, 7], "given": 2, "factor": 2, "factorizedpolynomi": 2, "repres": 2, "polynomi": [2, 3, 5], "its": 2, "cach": 2, "self": [2, 3], "_factorizationcach": 2, "coeffici": 2, "constant_part": 2, "ration": 2, "deriv": 2, "comput": [2, 6], "evalu": 2, "dict": 2, "gather_vari": 2, "set": [2, 6, 7], "is_const": 2, "is_on": 2, "underli": 2, "to_smt2": [2, 3], "factorizedrationalfunct": [2, 3], "function": [2, 3, 7], "fraction": 2, "two": [2, 5], "denomin": 2, "numer": 2, "rational_funct": 2, "rationalfunct": 2, "integ": [2, 5], "wrap": 2, "interv": 2, "ab": 2, "center": 2, "complement": 2, "arg1": 2, "contain": 2, "arg": [2, 3], "kwarg": [2, 3], "overload": [2, 3], "diamet": 2, "differ": [2, 5, 7], "arg2": 2, "div": 2, "static": 2, "emptyinterv": 2, "integralpart": 2, "intersect": 2, "intersectswith": 2, "invers": 2, "isclosedinterv": 2, "isempti": 2, "ishalfbound": 2, "isinfinit": 2, "isneg": 2, "ison": 2, "isopeninterv": 2, "ispointinterv": 2, "isposit": 2, "ispropersubset": 2, "issemineg": 2, "issemiposit": 2, "issubset": 2, "isunbound": 2, "iszero": 2, "lower": 2, "meet": 2, "sampl": 2, "setlow": 2, "setupp": 2, "symmetricdiffer": 2, "unboundedinterv": 2, "unit": 2, "upper": 2, "zerointerv": 2, "multivari": 2, "degre": 2, "nr_term": 2, "substitut": 2, "total_degre": 2, "nomin": 2, "term": 2, "coeff": 2, "ceil": 2, "create_factorized_polynomi": 2, "x": [2, 5], "expand": 2, "floor": 2, "isinteg": 2, "pow": 2, "quotient": 2, "is_minus_on": 2, "formulatyp": 3, "ITE": 3, "exist": 3, "foral": 3, "fals": 3, "NOT": 3, "impli": 3, "AND": 3, "OR": 3, "xor": 3, "constraint": 3, "bitvector": 3, "ueq": 3, "8": 3, "15": 3, "5": 3, "12": 3, "4": 3, "11": 3, "7": 3, "6": 3, "9": 3, "3": [3, 5, 7], "16": 3, "10": 3, "relat": 3, "eq": 3, "neq": 3, "less": 3, "leq": 3, "greater": 3, "geq": 3, "__str__": 3, "handl": 3, "lh": 3, "get_constraint": 3, "get_implication_conclus": 3, "conclus": 3, "implic": 3, "get_implication_premis": 3, "premis": 3, "get_ite_condit": 3, "condit": 3, "get_ite_first_cas": 3, "case": 3, "get_ite_second_cas": 3, "els": 3, "get_negation_subformula": 3, "subformula": 3, "negat": 3, "get_subformula": 3, "list": 3, "n": 3, "ari": 3, "simpleconstraint": 3, "left": 3, "hand": 3, "side": 3, "rel": 3, "simpleconstraintratfunc": 3, "parsererror": 4, "messag": 4, "error": 4, "which": [4, 7], "meant": 4, "rais": 4, "when": 4, "parser": [4, 7], "throw": 4, "an": [4, 7], "deseri": 4, "input": 4, "packag": [4, 7], "paramet": 4, "befor": [5, 7], "thi": [5, 7], "guid": [5, 7], "one": 5, "should": 5, "follow": [5, 7], "instruct": 5, "instal": [5, 6], "we": [5, 7], "launch": 5, "python": [5, 6, 7], "interpret": 5, "python3": [5, 7], "first": 5, "import": 5, "can": [5, 7], "us": [5, 7], "In": [5, 7], "exampl": 5, "therefor": 5, "correspond": 5, "modul": 5, "01": 5, "py": [5, 7], "do": [5, 7], "some": 5, "y": 5, "perform": 5, "common": 5, "pol1": 5, "pol2": 5, "result": 5, "format": 5, "bind": 6, "arithmet": 6, "logic": 6, "librari": [6, 7], "requir": 6, "step": 6, "start": [6, 7], "A": 6, "quick": 6, "tour": 6, "through": 6, "index": 6, "search": 6, "page": 6, "make": 7, "sure": 7, "avail": 7, "your": 7, "system": 7, "doe": 7, "storm": 7, "": 7, "fork": 7, "order": 7, "have": 7, "full": 7, "capabl": 7, "you": 7, "addition": 7, "need": 7, "user": 7, "appl": 7, "silicon": 7, "thei": 7, "ar": 7, "arm64": 7, "find": 7, "out": 7, "where": 7, "file": 7, "path": 7, "isol": 7, "project": 7, "help": 7, "keep": 7, "clean": 7, "while": 7, "recommend": 7, "To": 7, "primer": 7, "short": 7, "env": 7, "pip": 7, "virtualenv": 7, "p": 7, "sourc": 7, "bin": 7, "activ": 7, "The": 7, "last": 7, "whenev": 7, "consol": 7, "prompt": 7, "prefix": 7, "clone": 7, "ani": 7, "suitabl": 7, "locat": 7, "git": 7, "http": 7, "github": 7, "com": 7, "move": 7, "rwth": 7, "cd": 7, "develop": 7, "mode": 7, "favourit": 7, "distribut": 7, "wai": 7, "e": 7, "g": 7, "setup": 7, "ve": 7, "also": 7, "take": 7, "more": 7, "advanc": 7, "configur": 7, "specifi": 7, "If": 7, "multipl": 7, "cmake": 7, "abl": 7, "dir": 7, "TO": 7, "flag": 7, "build_ext": 7, "disabl": 7, "want": 7, "certain": 7, "being": 7, "built": 7, "debug": 7, "add": 7, "thread": 7, "per": 7, "default": 7, "manual": 7, "job": 7, "j": 7, "after": 7, "run": 7, "either": 7, "invok": 7, "pytest": 7, "directli": 7, "experi": 7, "issu": 7, "now": 7, "consult": 7, "api": 7, "refer": 7}, "objects": {"": [[2, 0, 0, "-", "pycarl"]], "pycarl": [[2, 1, 1, "", "BoundType"], [2, 1, 1, "", "Monomial"], [2, 4, 1, "", "NoPicklingSupport"], [2, 1, 1, "", "Variable"], [2, 1, 1, "", "VariableType"], [2, 5, 1, "", "carl_version"], [2, 5, 1, "", "clear_monomial_pool"], [2, 5, 1, "", "clear_pools"], [2, 5, 1, "", "clear_variable_pool"], [2, 0, 0, "-", "cln"], [1, 0, 0, "-", "convert"], [2, 5, 1, "", "create_monomial"], [3, 0, 0, "-", "formula"], [2, 0, 0, "-", "gmp"], [2, 5, 1, "", "has_cln"], [2, 5, 1, "", "has_parser"], [4, 0, 0, "-", "parse"], [2, 5, 1, "", "print_info"], [2, 5, 1, "", "variable_with_name"]], "pycarl.BoundType": [[2, 2, 1, "", "INFTY"], [2, 2, 1, "", "STRICT"], [2, 2, 1, "", "WEAK"], [2, 3, 1, "", "name"], [2, 3, 1, "", "value"]], "pycarl.Monomial": [[2, 3, 1, "", "exponents"], [2, 3, 1, "", "tdeg"]], "pycarl.Variable": [[2, 3, 1, "", "id"], [2, 3, 1, "", "is_no_variable"], [2, 3, 1, "", "name"], [2, 3, 1, "", "rank"], [2, 3, 1, "", "type"]], "pycarl.VariableType": [[2, 2, 1, "", "BOOL"], [2, 2, 1, "", "INT"], [2, 2, 1, "", "REAL"], [2, 3, 1, "", "name"], [2, 3, 1, "", "value"]], "pycarl.cln": [[2, 1, 1, "", "Factorization"], [2, 1, 1, "", "FactorizedPolynomial"], [2, 1, 1, "", "FactorizedRationalFunction"], [2, 1, 1, "", "Integer"], [2, 1, 1, "", "Interval"], [2, 1, 1, "", "Polynomial"], [2, 1, 1, "", "Rational"], [2, 1, 1, "", "RationalFunction"], [2, 1, 1, "", "Term"], [2, 5, 1, "", "abs"], [2, 5, 1, "", "ceil"], [2, 5, 1, "", "create_factorized_polynomial"], [2, 5, 1, "", "denominator"], [2, 5, 1, "", "div"], [2, 5, 1, "", "expand"], [2, 5, 1, "", "floor"], [3, 0, 0, "-", "formula"], [2, 5, 1, "", "isInteger"], [2, 5, 1, "", "numerator"], [4, 0, 0, "-", "parse"], [2, 5, 1, "", "pow"], [2, 5, 1, "", "quotient"]], "pycarl.cln.FactorizedPolynomial": [[2, 6, 1, "", "cache"], [2, 3, 1, "", "coefficient"], [2, 6, 1, "", "constant_part"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "factorization"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 6, 1, "", "is_one"], [2, 6, 1, "", "polynomial"], [2, 6, 1, "", "to_smt2"]], "pycarl.cln.FactorizedRationalFunction": [[2, 6, 1, "", "constant_part"], [2, 3, 1, "", "denominator"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 3, 1, "", "numerator"], [2, 6, 1, "", "rational_function"], [2, 6, 1, "", "to_smt2"]], "pycarl.cln.Interval": [[2, 6, 1, "", "abs"], [2, 6, 1, "", "center"], [2, 6, 1, "", "complement"], [2, 6, 1, "", "contains"], [2, 6, 1, "", "diameter"], [2, 6, 1, "", "difference"], [2, 6, 1, "", "div"], [2, 6, 1, "", "emptyInterval"], [2, 6, 1, "", "integralPart"], [2, 6, 1, "", "intersect"], [2, 6, 1, "", "intersectsWith"], [2, 6, 1, "", "inverse"], [2, 6, 1, "", "isClosedInterval"], [2, 6, 1, "", "isEmpty"], [2, 6, 1, "", "isHalfBounded"], [2, 6, 1, "", "isInfinite"], [2, 6, 1, "", "isNegative"], [2, 6, 1, "", "isOne"], [2, 6, 1, "", "isOpenInterval"], [2, 6, 1, "", "isPointInterval"], [2, 6, 1, "", "isPositive"], [2, 6, 1, "", "isProperSubset"], [2, 6, 1, "", "isSemiNegative"], [2, 6, 1, "", "isSemiPositive"], [2, 6, 1, "", "isSubset"], [2, 6, 1, "", "isUnbounded"], [2, 6, 1, "", "isZero"], [2, 6, 1, "", "lower"], [2, 6, 1, "", "meets"], [2, 6, 1, "", "sample"], [2, 6, 1, "", "setLower"], [2, 6, 1, "", "setUpper"], [2, 6, 1, "", "symmetricDifference"], [2, 6, 1, "", "unboundedInterval"], [2, 6, 1, "", "unite"], [2, 6, 1, "", "upper"], [2, 6, 1, "", "zeroInterval"]], "pycarl.cln.Polynomial": [[2, 6, 1, "", "constant_part"], [2, 6, 1, "", "degree"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 3, 1, "", "nr_terms"], [2, 6, 1, "", "substitute"], [2, 6, 1, "", "to_smt2"], [2, 3, 1, "", "total_degree"]], "pycarl.cln.Rational": [[2, 3, 1, "", "denominator"], [2, 6, 1, "", "is_minus_one"], [2, 6, 1, "", "is_one"], [2, 3, 1, "", "nominator"], [2, 3, 1, "", "numerator"]], "pycarl.cln.RationalFunction": [[2, 6, 1, "", "constant_part"], [2, 3, 1, "", "denominator"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 3, 1, "", "nominator"], [2, 3, 1, "", "numerator"], [2, 6, 1, "", "to_smt2"]], "pycarl.cln.Term": [[2, 3, 1, "", "coeff"], [2, 6, 1, "", "is_constant"], [2, 6, 1, "", "is_one"], [2, 3, 1, "", "monomial"], [2, 3, 1, "", "tdeg"]], "pycarl.cln.formula": [[3, 1, 1, "", "Constraint"], [3, 1, 1, "", "Formula"], [3, 1, 1, "", "SimpleConstraint"], [3, 1, 1, "", "SimpleConstraintRatFunc"]], "pycarl.cln.formula.Constraint": [[3, 3, 1, "", "lhs"], [3, 3, 1, "", "relation"], [3, 6, 1, "", "to_smt2"]], "pycarl.cln.formula.Formula": [[3, 6, 1, "", "get_constraint"], [3, 6, 1, "", "get_implication_conclusion"], [3, 6, 1, "", "get_implication_premise"], [3, 6, 1, "", "get_ite_condition"], [3, 6, 1, "", "get_ite_first_case"], [3, 6, 1, "", "get_ite_second_case"], [3, 6, 1, "", "get_negation_subformula"], [3, 6, 1, "", "get_subformulas"], [3, 6, 1, "", "to_smt2"], [3, 3, 1, "", "type"]], "pycarl.cln.formula.SimpleConstraint": [[3, 6, 1, "", "lhs"], [3, 6, 1, "", "rel"]], "pycarl.cln.formula.SimpleConstraintRatFunc": [[3, 6, 1, "", "lhs"], [3, 6, 1, "", "rel"]], "pycarl.convert": [[1, 5, 1, "", "convert_to_cln"], [1, 5, 1, "", "convert_to_gmp"]], "pycarl.formula": [[3, 1, 1, "", "FormulaType"], [3, 1, 1, "", "Relation"]], "pycarl.formula.FormulaType": [[3, 2, 1, "", "AND"], [3, 2, 1, "", "BITVECTOR"], [3, 2, 1, "", "BOOL"], [3, 2, 1, "", "CONSTRAINT"], [3, 2, 1, "", "EXISTS"], [3, 2, 1, "", "FALSE"], [3, 2, 1, "", "FORALL"], [3, 2, 1, "", "IFF"], [3, 2, 1, "", "IMPLIES"], [3, 2, 1, "", "ITE"], [3, 2, 1, "", "NOT"], [3, 2, 1, "", "OR"], [3, 2, 1, "", "TRUE"], [3, 2, 1, "", "UEQ"], [3, 2, 1, "", "XOR"], [3, 3, 1, "", "name"], [3, 3, 1, "", "value"]], "pycarl.formula.Relation": [[3, 2, 1, "", "EQ"], [3, 2, 1, "", "GEQ"], [3, 2, 1, "", "GREATER"], [3, 2, 1, "", "LEQ"], [3, 2, 1, "", "LESS"], [3, 2, 1, "", "NEQ"], [3, 6, 1, "", "name"], [3, 3, 1, "", "value"]], "pycarl.gmp": [[2, 1, 1, "", "Factorization"], [2, 1, 1, "", "FactorizedPolynomial"], [2, 1, 1, "", "FactorizedRationalFunction"], [2, 1, 1, "", "Integer"], [2, 1, 1, "", "Interval"], [2, 1, 1, "", "Polynomial"], [2, 1, 1, "", "Rational"], [2, 1, 1, "", "RationalFunction"], [2, 1, 1, "", "Term"], [2, 5, 1, "", "abs"], [2, 5, 1, "", "ceil"], [2, 5, 1, "", "create_factorized_polynomial"], [2, 5, 1, "", "denominator"], [2, 5, 1, "", "div"], [2, 5, 1, "", "expand"], [2, 5, 1, "", "floor"], [3, 0, 0, "-", "formula"], [2, 5, 1, "", "isInteger"], [2, 5, 1, "", "numerator"], [4, 0, 0, "-", "parse"], [2, 5, 1, "", "pow"], [2, 5, 1, "", "quotient"]], "pycarl.gmp.FactorizedPolynomial": [[2, 6, 1, "", "cache"], [2, 3, 1, "", "coefficient"], [2, 6, 1, "", "constant_part"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "factorization"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 6, 1, "", "is_one"], [2, 6, 1, "", "polynomial"], [2, 6, 1, "", "to_smt2"]], "pycarl.gmp.FactorizedRationalFunction": [[2, 6, 1, "", "constant_part"], [2, 3, 1, "", "denominator"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 3, 1, "", "numerator"], [2, 6, 1, "", "rational_function"], [2, 6, 1, "", "to_smt2"]], "pycarl.gmp.Interval": [[2, 6, 1, "", "abs"], [2, 6, 1, "", "center"], [2, 6, 1, "", "complement"], [2, 6, 1, "", "contains"], [2, 6, 1, "", "diameter"], [2, 6, 1, "", "difference"], [2, 6, 1, "", "div"], [2, 6, 1, "", "emptyInterval"], [2, 6, 1, "", "integralPart"], [2, 6, 1, "", "intersect"], [2, 6, 1, "", "intersectsWith"], [2, 6, 1, "", "inverse"], [2, 6, 1, "", "isClosedInterval"], [2, 6, 1, "", "isEmpty"], [2, 6, 1, "", "isHalfBounded"], [2, 6, 1, "", "isInfinite"], [2, 6, 1, "", "isNegative"], [2, 6, 1, "", "isOne"], [2, 6, 1, "", "isOpenInterval"], [2, 6, 1, "", "isPointInterval"], [2, 6, 1, "", "isPositive"], [2, 6, 1, "", "isProperSubset"], [2, 6, 1, "", "isSemiNegative"], [2, 6, 1, "", "isSemiPositive"], [2, 6, 1, "", "isSubset"], [2, 6, 1, "", "isUnbounded"], [2, 6, 1, "", "isZero"], [2, 6, 1, "", "lower"], [2, 6, 1, "", "meets"], [2, 6, 1, "", "sample"], [2, 6, 1, "", "setLower"], [2, 6, 1, "", "setUpper"], [2, 6, 1, "", "symmetricDifference"], [2, 6, 1, "", "unboundedInterval"], [2, 6, 1, "", "unite"], [2, 6, 1, "", "upper"], [2, 6, 1, "", "zeroInterval"]], "pycarl.gmp.Polynomial": [[2, 6, 1, "", "constant_part"], [2, 6, 1, "", "degree"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 3, 1, "", "nr_terms"], [2, 6, 1, "", "substitute"], [2, 6, 1, "", "to_smt2"], [2, 3, 1, "", "total_degree"]], "pycarl.gmp.Rational": [[2, 3, 1, "", "denominator"], [2, 3, 1, "", "nominator"], [2, 3, 1, "", "numerator"]], "pycarl.gmp.RationalFunction": [[2, 6, 1, "", "constant_part"], [2, 3, 1, "", "denominator"], [2, 6, 1, "", "derive"], [2, 6, 1, "", "evaluate"], [2, 6, 1, "", "gather_variables"], [2, 6, 1, "", "is_constant"], [2, 3, 1, "", "nominator"], [2, 3, 1, "", "numerator"], [2, 6, 1, "", "to_smt2"]], "pycarl.gmp.Term": [[2, 3, 1, "", "coeff"], [2, 6, 1, "", "is_constant"], [2, 6, 1, "", "is_one"], [2, 3, 1, "", "monomial"], [2, 3, 1, "", "tdeg"]], "pycarl.gmp.formula": [[3, 1, 1, "", "Constraint"], [3, 1, 1, "", "Formula"], [3, 1, 1, "", "SimpleConstraint"], [3, 1, 1, "", "SimpleConstraintRatFunc"]], "pycarl.gmp.formula.Constraint": [[3, 3, 1, "", "lhs"], [3, 3, 1, "", "relation"], [3, 6, 1, "", "to_smt2"]], "pycarl.gmp.formula.Formula": [[3, 6, 1, "", "get_constraint"], [3, 6, 1, "", "get_implication_conclusion"], [3, 6, 1, "", "get_implication_premise"], [3, 6, 1, "", "get_ite_condition"], [3, 6, 1, "", "get_ite_first_case"], [3, 6, 1, "", "get_ite_second_case"], [3, 6, 1, "", "get_negation_subformula"], [3, 6, 1, "", "get_subformulas"], [3, 6, 1, "", "to_smt2"], [3, 3, 1, "", "type"]], "pycarl.gmp.formula.SimpleConstraint": [[3, 6, 1, "", "lhs"], [3, 6, 1, "", "rel"]], "pycarl.gmp.formula.SimpleConstraintRatFunc": [[3, 6, 1, "", "lhs"], [3, 6, 1, "", "rel"]], "pycarl.parse": [[4, 4, 1, "", "ParserError"], [4, 5, 1, "", "deserialize"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:property", "4": "py:exception", "5": "py:function", "6": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "property", "Python property"], "4": ["py", "exception", "Python exception"], "5": ["py", "function", "Python function"], "6": ["py", "method", "Python method"]}, "titleterms": {"pycarl": [0, 1, 2, 3, 4, 5, 6, 7], "api": [0, 6], "refer": [0, 6], "modul": [0, 6], "convert": 1, "number": [1, 2, 3, 4], "convers": 1, "core": 2, "independ": [2, 3, 4], "type": [2, 3, 4], "depend": [2, 3, 4], "gmp": [2, 3, 4], "cln": [2, 3, 4], "formula": 3, "pars": 4, "get": 5, "start": 5, "A": 5, "quick": 5, "tour": 5, "through": 5, "simpl": 5, "arithmet": 5, "oper": 5, "welcom": 6, "": 6, "document": 6, "content": 6, "indic": 6, "tabl": 6, "instal": 7, "requir": 7, "step": 7, "virtual": 7, "environ": 7, "build": 7, "option": 7, "argument": 7, "test": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Pycarl API Reference": [[0, "pycarl-api-reference"], [6, "pycarl-api-reference"]], "Modules:": [[0, null], [6, null]], "Pycarl convert": [[1, "pycarl-convert"]], "Number conversion": [[1, "module-pycarl.convert"]], "Pycarl core": [[2, "pycarl-core"]], "Number independent types": [[2, "module-pycarl"], [3, "module-pycarl.formula"], [4, "module-pycarl.parse"]], "Number dependent types (gmp)": [[2, "module-pycarl.gmp"], [3, "module-pycarl.gmp.formula"], [4, "module-pycarl.gmp.parse"]], "Number dependent types (cln)": [[2, "module-pycarl.cln"], [3, "module-pycarl.cln.formula"], [4, "module-pycarl.cln.parse"]], "Pycarl formula": [[3, "pycarl-formula"]], "Pycarl parse": [[4, "pycarl-parse"]], "Getting Started": [[5, "getting-started"]], "A Quick Tour through pycarl": [[5, "a-quick-tour-through-pycarl"]], "Simple arithmetic operations": [[5, "simple-arithmetic-operations"]], "Welcome to pycarl\u2019s documentation!": [[6, "welcome-to-pycarl-s-documentation"]], "Contents:": [[6, null]], "Indices and tables": [[6, "indices-and-tables"]], "Installation": [[7, "installation"]], "Requirements": [[7, "requirements"]], "Installation Steps": [[7, "installation-steps"]], "Virtual Environments": [[7, "virtual-environments"]], "Building pycarl": [[7, "building-pycarl"]], "Optional build arguments": [[7, "optional-build-arguments"]], "Testing pycarl installation": [[7, "testing-pycarl-installation"]]}, "indexentries": {"convert_to_cln() (in module pycarl.convert)": [[1, "pycarl.convert.convert_to_cln"]], "convert_to_gmp() (in module pycarl.convert)": [[1, "pycarl.convert.convert_to_gmp"]], "module": [[1, "module-pycarl.convert"], [2, "module-pycarl"], [2, "module-pycarl.cln"], [2, "module-pycarl.gmp"], [3, "module-pycarl.cln.formula"], [3, "module-pycarl.formula"], [3, "module-pycarl.gmp.formula"], [4, "module-pycarl.cln.parse"], [4, "module-pycarl.gmp.parse"], [4, "module-pycarl.parse"]], "pycarl.convert": [[1, "module-pycarl.convert"]], "bool (pycarl.variabletype attribute)": [[2, "pycarl.VariableType.BOOL"]], "boundtype (class in pycarl)": [[2, "pycarl.BoundType"]], "factorization (class in pycarl.cln)": [[2, "pycarl.cln.Factorization"]], "factorization (class in pycarl.gmp)": [[2, "pycarl.gmp.Factorization"]], "factorizedpolynomial (class in pycarl.cln)": [[2, "pycarl.cln.FactorizedPolynomial"]], "factorizedpolynomial (class in pycarl.gmp)": [[2, "pycarl.gmp.FactorizedPolynomial"]], "factorizedrationalfunction (class in pycarl.cln)": [[2, "pycarl.cln.FactorizedRationalFunction"]], "factorizedrationalfunction (class in pycarl.gmp)": [[2, "pycarl.gmp.FactorizedRationalFunction"]], "infty (pycarl.boundtype attribute)": [[2, "pycarl.BoundType.INFTY"]], "int (pycarl.variabletype attribute)": [[2, "pycarl.VariableType.INT"]], "integer (class in pycarl.cln)": [[2, "pycarl.cln.Integer"]], "integer (class in pycarl.gmp)": [[2, "pycarl.gmp.Integer"]], "interval (class in pycarl.cln)": [[2, "pycarl.cln.Interval"]], "interval (class in pycarl.gmp)": [[2, "pycarl.gmp.Interval"]], "monomial (class in pycarl)": [[2, "pycarl.Monomial"]], "nopicklingsupport": [[2, "pycarl.NoPicklingSupport"]], "polynomial (class in pycarl.cln)": [[2, "pycarl.cln.Polynomial"]], "polynomial (class in pycarl.gmp)": [[2, "pycarl.gmp.Polynomial"]], "real (pycarl.variabletype attribute)": [[2, "pycarl.VariableType.REAL"]], "rational (class in pycarl.cln)": [[2, "pycarl.cln.Rational"]], "rational (class in pycarl.gmp)": [[2, "pycarl.gmp.Rational"]], "rationalfunction (class in pycarl.cln)": [[2, "pycarl.cln.RationalFunction"]], "rationalfunction (class in pycarl.gmp)": [[2, "pycarl.gmp.RationalFunction"]], "strict (pycarl.boundtype attribute)": [[2, "pycarl.BoundType.STRICT"]], "term (class in pycarl.cln)": [[2, "pycarl.cln.Term"]], "term (class in pycarl.gmp)": [[2, "pycarl.gmp.Term"]], "variable (class in pycarl)": [[2, "pycarl.Variable"]], "variabletype (class in pycarl)": [[2, "pycarl.VariableType"]], "weak (pycarl.boundtype attribute)": [[2, "pycarl.BoundType.WEAK"]], "abs() (in module pycarl.cln)": [[2, "pycarl.cln.abs"]], "abs() (in module pycarl.gmp)": [[2, "pycarl.gmp.abs"]], "abs() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.abs"]], "abs() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.abs"]], "cache() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.cache"]], "cache() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.cache"]], "carl_version() (in module pycarl)": [[2, "pycarl.carl_version"]], "ceil() (in module pycarl.cln)": [[2, "pycarl.cln.ceil"]], "ceil() (in module pycarl.gmp)": [[2, "pycarl.gmp.ceil"]], "center() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.center"]], "center() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.center"]], "clear_monomial_pool() (in module pycarl)": [[2, "pycarl.clear_monomial_pool"]], "clear_pools() (in module pycarl)": [[2, "pycarl.clear_pools"]], "clear_variable_pool() (in module pycarl)": [[2, "pycarl.clear_variable_pool"]], "coeff (pycarl.cln.term property)": [[2, "pycarl.cln.Term.coeff"]], "coeff (pycarl.gmp.term property)": [[2, "pycarl.gmp.Term.coeff"]], "coefficient (pycarl.cln.factorizedpolynomial property)": [[2, "pycarl.cln.FactorizedPolynomial.coefficient"]], "coefficient (pycarl.gmp.factorizedpolynomial property)": [[2, "pycarl.gmp.FactorizedPolynomial.coefficient"]], "complement() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.complement"]], "complement() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.complement"]], "constant_part() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.constant_part"]], "constant_part() (pycarl.cln.factorizedrationalfunction method)": [[2, "pycarl.cln.FactorizedRationalFunction.constant_part"]], "constant_part() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.constant_part"]], "constant_part() (pycarl.cln.rationalfunction method)": [[2, "pycarl.cln.RationalFunction.constant_part"]], "constant_part() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.constant_part"]], "constant_part() (pycarl.gmp.factorizedrationalfunction method)": [[2, "pycarl.gmp.FactorizedRationalFunction.constant_part"]], "constant_part() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.constant_part"]], "constant_part() (pycarl.gmp.rationalfunction method)": [[2, "pycarl.gmp.RationalFunction.constant_part"]], "contains() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.contains"]], "contains() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.contains"]], "create_factorized_polynomial() (in module pycarl.cln)": [[2, "pycarl.cln.create_factorized_polynomial"]], "create_factorized_polynomial() (in module pycarl.gmp)": [[2, "pycarl.gmp.create_factorized_polynomial"]], "create_monomial() (in module pycarl)": [[2, "pycarl.create_monomial"]], "degree() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.degree"]], "degree() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.degree"]], "denominator (pycarl.cln.factorizedrationalfunction property)": [[2, "pycarl.cln.FactorizedRationalFunction.denominator"]], "denominator (pycarl.cln.rational property)": [[2, "pycarl.cln.Rational.denominator"]], "denominator (pycarl.cln.rationalfunction property)": [[2, "pycarl.cln.RationalFunction.denominator"]], "denominator (pycarl.gmp.factorizedrationalfunction property)": [[2, "pycarl.gmp.FactorizedRationalFunction.denominator"]], "denominator (pycarl.gmp.rational property)": [[2, "pycarl.gmp.Rational.denominator"]], "denominator (pycarl.gmp.rationalfunction property)": [[2, "pycarl.gmp.RationalFunction.denominator"]], "denominator() (in module pycarl.cln)": [[2, "pycarl.cln.denominator"]], "denominator() (in module pycarl.gmp)": [[2, "pycarl.gmp.denominator"]], "derive() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.derive"]], "derive() (pycarl.cln.factorizedrationalfunction method)": [[2, "pycarl.cln.FactorizedRationalFunction.derive"]], "derive() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.derive"]], "derive() (pycarl.cln.rationalfunction method)": [[2, "pycarl.cln.RationalFunction.derive"]], "derive() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.derive"]], "derive() (pycarl.gmp.factorizedrationalfunction method)": [[2, "pycarl.gmp.FactorizedRationalFunction.derive"]], "derive() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.derive"]], "derive() (pycarl.gmp.rationalfunction method)": [[2, "pycarl.gmp.RationalFunction.derive"]], "diameter() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.diameter"]], "diameter() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.diameter"]], "difference() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.difference"]], "difference() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.difference"]], "div() (in module pycarl.cln)": [[2, "pycarl.cln.div"]], "div() (in module pycarl.gmp)": [[2, "pycarl.gmp.div"]], "div() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.div"]], "div() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.div"]], "emptyinterval() (pycarl.cln.interval static method)": [[2, "pycarl.cln.Interval.emptyInterval"]], "emptyinterval() (pycarl.gmp.interval static method)": [[2, "pycarl.gmp.Interval.emptyInterval"]], "evaluate() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.evaluate"]], "evaluate() (pycarl.cln.factorizedrationalfunction method)": [[2, "pycarl.cln.FactorizedRationalFunction.evaluate"]], "evaluate() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.evaluate"]], "evaluate() (pycarl.cln.rationalfunction method)": [[2, "pycarl.cln.RationalFunction.evaluate"]], "evaluate() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.evaluate"]], "evaluate() (pycarl.gmp.factorizedrationalfunction method)": [[2, "pycarl.gmp.FactorizedRationalFunction.evaluate"]], "evaluate() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.evaluate"]], "evaluate() (pycarl.gmp.rationalfunction method)": [[2, "pycarl.gmp.RationalFunction.evaluate"]], "expand() (in module pycarl.cln)": [[2, "pycarl.cln.expand"]], "expand() (in module pycarl.gmp)": [[2, "pycarl.gmp.expand"]], "exponents (pycarl.monomial property)": [[2, "pycarl.Monomial.exponents"]], "factorization() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.factorization"]], "factorization() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.factorization"]], "floor() (in module pycarl.cln)": [[2, "pycarl.cln.floor"]], "floor() (in module pycarl.gmp)": [[2, "pycarl.gmp.floor"]], "gather_variables() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.gather_variables"]], "gather_variables() (pycarl.cln.factorizedrationalfunction method)": [[2, "pycarl.cln.FactorizedRationalFunction.gather_variables"]], "gather_variables() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.gather_variables"]], "gather_variables() (pycarl.cln.rationalfunction method)": [[2, "pycarl.cln.RationalFunction.gather_variables"]], "gather_variables() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.gather_variables"]], "gather_variables() (pycarl.gmp.factorizedrationalfunction method)": [[2, "pycarl.gmp.FactorizedRationalFunction.gather_variables"]], "gather_variables() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.gather_variables"]], "gather_variables() (pycarl.gmp.rationalfunction method)": [[2, "pycarl.gmp.RationalFunction.gather_variables"]], "has_cln() (in module pycarl)": [[2, "pycarl.has_cln"]], "has_parser() (in module pycarl)": [[2, "pycarl.has_parser"]], "id (pycarl.variable property)": [[2, "pycarl.Variable.id"]], "integralpart() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.integralPart"]], "integralpart() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.integralPart"]], "intersect() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.intersect"]], "intersect() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.intersect"]], "intersectswith() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.intersectsWith"]], "intersectswith() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.intersectsWith"]], "inverse() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.inverse"]], "inverse() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.inverse"]], "isclosedinterval() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isClosedInterval"]], "isclosedinterval() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isClosedInterval"]], "isempty() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isEmpty"]], "isempty() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isEmpty"]], "ishalfbounded() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isHalfBounded"]], "ishalfbounded() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isHalfBounded"]], "isinfinite() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isInfinite"]], "isinfinite() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isInfinite"]], "isinteger() (in module pycarl.cln)": [[2, "pycarl.cln.isInteger"]], "isinteger() (in module pycarl.gmp)": [[2, "pycarl.gmp.isInteger"]], "isnegative() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isNegative"]], "isnegative() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isNegative"]], "isone() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isOne"]], "isone() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isOne"]], "isopeninterval() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isOpenInterval"]], "isopeninterval() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isOpenInterval"]], "ispointinterval() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isPointInterval"]], "ispointinterval() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isPointInterval"]], "ispositive() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isPositive"]], "ispositive() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isPositive"]], "ispropersubset() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isProperSubset"]], "ispropersubset() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isProperSubset"]], "isseminegative() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isSemiNegative"]], "isseminegative() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isSemiNegative"]], "issemipositive() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isSemiPositive"]], "issemipositive() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isSemiPositive"]], "issubset() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isSubset"]], "issubset() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isSubset"]], "isunbounded() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isUnbounded"]], "isunbounded() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isUnbounded"]], "iszero() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.isZero"]], "iszero() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.isZero"]], "is_constant() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.is_constant"]], "is_constant() (pycarl.cln.factorizedrationalfunction method)": [[2, "pycarl.cln.FactorizedRationalFunction.is_constant"]], "is_constant() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.is_constant"]], "is_constant() (pycarl.cln.rationalfunction method)": [[2, "pycarl.cln.RationalFunction.is_constant"]], "is_constant() (pycarl.cln.term method)": [[2, "pycarl.cln.Term.is_constant"]], "is_constant() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.is_constant"]], "is_constant() (pycarl.gmp.factorizedrationalfunction method)": [[2, "pycarl.gmp.FactorizedRationalFunction.is_constant"]], "is_constant() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.is_constant"]], "is_constant() (pycarl.gmp.rationalfunction method)": [[2, "pycarl.gmp.RationalFunction.is_constant"]], "is_constant() (pycarl.gmp.term method)": [[2, "pycarl.gmp.Term.is_constant"]], "is_minus_one() (pycarl.cln.rational method)": [[2, "pycarl.cln.Rational.is_minus_one"]], "is_no_variable (pycarl.variable property)": [[2, "pycarl.Variable.is_no_variable"]], "is_one() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.is_one"]], "is_one() (pycarl.cln.rational method)": [[2, "pycarl.cln.Rational.is_one"]], "is_one() (pycarl.cln.term method)": [[2, "pycarl.cln.Term.is_one"]], "is_one() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.is_one"]], "is_one() (pycarl.gmp.term method)": [[2, "pycarl.gmp.Term.is_one"]], "lower() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.lower"]], "lower() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.lower"]], "meets() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.meets"]], "meets() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.meets"]], "monomial (pycarl.cln.term property)": [[2, "pycarl.cln.Term.monomial"]], "monomial (pycarl.gmp.term property)": [[2, "pycarl.gmp.Term.monomial"]], "name (pycarl.boundtype property)": [[2, "pycarl.BoundType.name"]], "name (pycarl.variable property)": [[2, "pycarl.Variable.name"]], "name (pycarl.variabletype property)": [[2, "pycarl.VariableType.name"]], "nominator (pycarl.cln.rational property)": [[2, "pycarl.cln.Rational.nominator"]], "nominator (pycarl.cln.rationalfunction property)": [[2, "pycarl.cln.RationalFunction.nominator"]], "nominator (pycarl.gmp.rational property)": [[2, "pycarl.gmp.Rational.nominator"]], "nominator (pycarl.gmp.rationalfunction property)": [[2, "pycarl.gmp.RationalFunction.nominator"]], "nr_terms (pycarl.cln.polynomial property)": [[2, "pycarl.cln.Polynomial.nr_terms"]], "nr_terms (pycarl.gmp.polynomial property)": [[2, "pycarl.gmp.Polynomial.nr_terms"]], "numerator (pycarl.cln.factorizedrationalfunction property)": [[2, "pycarl.cln.FactorizedRationalFunction.numerator"]], "numerator (pycarl.cln.rational property)": [[2, "pycarl.cln.Rational.numerator"]], "numerator (pycarl.cln.rationalfunction property)": [[2, "pycarl.cln.RationalFunction.numerator"]], "numerator (pycarl.gmp.factorizedrationalfunction property)": [[2, "pycarl.gmp.FactorizedRationalFunction.numerator"]], "numerator (pycarl.gmp.rational property)": [[2, "pycarl.gmp.Rational.numerator"]], "numerator (pycarl.gmp.rationalfunction property)": [[2, "pycarl.gmp.RationalFunction.numerator"]], "numerator() (in module pycarl.cln)": [[2, "pycarl.cln.numerator"]], "numerator() (in module pycarl.gmp)": [[2, "pycarl.gmp.numerator"]], "polynomial() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.polynomial"]], "polynomial() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.polynomial"]], "pow() (in module pycarl.cln)": [[2, "pycarl.cln.pow"]], "pow() (in module pycarl.gmp)": [[2, "pycarl.gmp.pow"]], "print_info() (in module pycarl)": [[2, "pycarl.print_info"]], "pycarl": [[2, "module-pycarl"]], "pycarl.cln": [[2, "module-pycarl.cln"]], "pycarl.gmp": [[2, "module-pycarl.gmp"]], "quotient() (in module pycarl.cln)": [[2, "pycarl.cln.quotient"]], "quotient() (in module pycarl.gmp)": [[2, "pycarl.gmp.quotient"]], "rank (pycarl.variable property)": [[2, "pycarl.Variable.rank"]], "rational_function() (pycarl.cln.factorizedrationalfunction method)": [[2, "pycarl.cln.FactorizedRationalFunction.rational_function"]], "rational_function() (pycarl.gmp.factorizedrationalfunction method)": [[2, "pycarl.gmp.FactorizedRationalFunction.rational_function"]], "sample() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.sample"]], "sample() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.sample"]], "setlower() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.setLower"]], "setlower() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.setLower"]], "setupper() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.setUpper"]], "setupper() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.setUpper"]], "substitute() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.substitute"]], "substitute() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.substitute"]], "symmetricdifference() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.symmetricDifference"]], "symmetricdifference() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.symmetricDifference"]], "tdeg (pycarl.monomial property)": [[2, "pycarl.Monomial.tdeg"]], "tdeg (pycarl.cln.term property)": [[2, "pycarl.cln.Term.tdeg"]], "tdeg (pycarl.gmp.term property)": [[2, "pycarl.gmp.Term.tdeg"]], "to_smt2() (pycarl.cln.factorizedpolynomial method)": [[2, "pycarl.cln.FactorizedPolynomial.to_smt2"]], "to_smt2() (pycarl.cln.factorizedrationalfunction method)": [[2, "pycarl.cln.FactorizedRationalFunction.to_smt2"]], "to_smt2() (pycarl.cln.polynomial method)": [[2, "pycarl.cln.Polynomial.to_smt2"]], "to_smt2() (pycarl.cln.rationalfunction method)": [[2, "pycarl.cln.RationalFunction.to_smt2"]], "to_smt2() (pycarl.gmp.factorizedpolynomial method)": [[2, "pycarl.gmp.FactorizedPolynomial.to_smt2"]], "to_smt2() (pycarl.gmp.factorizedrationalfunction method)": [[2, "pycarl.gmp.FactorizedRationalFunction.to_smt2"]], "to_smt2() (pycarl.gmp.polynomial method)": [[2, "pycarl.gmp.Polynomial.to_smt2"]], "to_smt2() (pycarl.gmp.rationalfunction method)": [[2, "pycarl.gmp.RationalFunction.to_smt2"]], "total_degree (pycarl.cln.polynomial property)": [[2, "pycarl.cln.Polynomial.total_degree"]], "total_degree (pycarl.gmp.polynomial property)": [[2, "pycarl.gmp.Polynomial.total_degree"]], "type (pycarl.variable property)": [[2, "pycarl.Variable.type"]], "unboundedinterval() (pycarl.cln.interval static method)": [[2, "pycarl.cln.Interval.unboundedInterval"]], "unboundedinterval() (pycarl.gmp.interval static method)": [[2, "pycarl.gmp.Interval.unboundedInterval"]], "unite() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.unite"]], "unite() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.unite"]], "upper() (pycarl.cln.interval method)": [[2, "pycarl.cln.Interval.upper"]], "upper() (pycarl.gmp.interval method)": [[2, "pycarl.gmp.Interval.upper"]], "value (pycarl.boundtype property)": [[2, "pycarl.BoundType.value"]], "value (pycarl.variabletype property)": [[2, "pycarl.VariableType.value"]], "variable_with_name() (in module pycarl)": [[2, "pycarl.variable_with_name"]], "zerointerval() (pycarl.cln.interval static method)": [[2, "pycarl.cln.Interval.zeroInterval"]], "zerointerval() (pycarl.gmp.interval static method)": [[2, "pycarl.gmp.Interval.zeroInterval"]], "and (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.AND"]], "bitvector (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.BITVECTOR"]], "bool (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.BOOL"]], "constraint (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.CONSTRAINT"]], "constraint (class in pycarl.cln.formula)": [[3, "pycarl.cln.formula.Constraint"]], "constraint (class in pycarl.gmp.formula)": [[3, "pycarl.gmp.formula.Constraint"]], "eq (pycarl.formula.relation attribute)": [[3, "pycarl.formula.Relation.EQ"]], "exists (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.EXISTS"]], "false (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.FALSE"]], "forall (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.FORALL"]], "formula (class in pycarl.cln.formula)": [[3, "pycarl.cln.formula.Formula"]], "formula (class in pycarl.gmp.formula)": [[3, "pycarl.gmp.formula.Formula"]], "formulatype (class in pycarl.formula)": [[3, "pycarl.formula.FormulaType"]], "geq (pycarl.formula.relation attribute)": [[3, "pycarl.formula.Relation.GEQ"]], "greater (pycarl.formula.relation attribute)": [[3, "pycarl.formula.Relation.GREATER"]], "iff (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.IFF"]], "implies (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.IMPLIES"]], "ite (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.ITE"]], "leq (pycarl.formula.relation attribute)": [[3, "pycarl.formula.Relation.LEQ"]], "less (pycarl.formula.relation attribute)": [[3, "pycarl.formula.Relation.LESS"]], "neq (pycarl.formula.relation attribute)": [[3, "pycarl.formula.Relation.NEQ"]], "not (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.NOT"]], "or (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.OR"]], "relation (class in pycarl.formula)": [[3, "pycarl.formula.Relation"]], "simpleconstraint (class in pycarl.cln.formula)": [[3, "pycarl.cln.formula.SimpleConstraint"]], "simpleconstraint (class in pycarl.gmp.formula)": [[3, "pycarl.gmp.formula.SimpleConstraint"]], "simpleconstraintratfunc (class in pycarl.cln.formula)": [[3, "pycarl.cln.formula.SimpleConstraintRatFunc"]], "simpleconstraintratfunc (class in pycarl.gmp.formula)": [[3, "pycarl.gmp.formula.SimpleConstraintRatFunc"]], "true (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.TRUE"]], "ueq (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.UEQ"]], "xor (pycarl.formula.formulatype attribute)": [[3, "pycarl.formula.FormulaType.XOR"]], "get_constraint() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_constraint"]], "get_constraint() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_constraint"]], "get_implication_conclusion() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_implication_conclusion"]], "get_implication_conclusion() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_implication_conclusion"]], "get_implication_premise() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_implication_premise"]], "get_implication_premise() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_implication_premise"]], "get_ite_condition() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_ite_condition"]], "get_ite_condition() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_ite_condition"]], "get_ite_first_case() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_ite_first_case"]], "get_ite_first_case() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_ite_first_case"]], "get_ite_second_case() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_ite_second_case"]], "get_ite_second_case() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_ite_second_case"]], "get_negation_subformula() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_negation_subformula"]], "get_negation_subformula() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_negation_subformula"]], "get_subformulas() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.get_subformulas"]], "get_subformulas() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.get_subformulas"]], "lhs (pycarl.cln.formula.constraint property)": [[3, "pycarl.cln.formula.Constraint.lhs"]], "lhs (pycarl.gmp.formula.constraint property)": [[3, "pycarl.gmp.formula.Constraint.lhs"]], "lhs() (pycarl.cln.formula.simpleconstraint method)": [[3, "pycarl.cln.formula.SimpleConstraint.lhs"]], "lhs() (pycarl.cln.formula.simpleconstraintratfunc method)": [[3, "pycarl.cln.formula.SimpleConstraintRatFunc.lhs"]], "lhs() (pycarl.gmp.formula.simpleconstraint method)": [[3, "pycarl.gmp.formula.SimpleConstraint.lhs"]], "lhs() (pycarl.gmp.formula.simpleconstraintratfunc method)": [[3, "pycarl.gmp.formula.SimpleConstraintRatFunc.lhs"]], "name (pycarl.formula.formulatype property)": [[3, "pycarl.formula.FormulaType.name"]], "name() (pycarl.formula.relation method)": [[3, "pycarl.formula.Relation.name"]], "pycarl.cln.formula": [[3, "module-pycarl.cln.formula"]], "pycarl.formula": [[3, "module-pycarl.formula"]], "pycarl.gmp.formula": [[3, "module-pycarl.gmp.formula"]], "rel() (pycarl.cln.formula.simpleconstraint method)": [[3, "pycarl.cln.formula.SimpleConstraint.rel"]], "rel() (pycarl.cln.formula.simpleconstraintratfunc method)": [[3, "pycarl.cln.formula.SimpleConstraintRatFunc.rel"]], "rel() (pycarl.gmp.formula.simpleconstraint method)": [[3, "pycarl.gmp.formula.SimpleConstraint.rel"]], "rel() (pycarl.gmp.formula.simpleconstraintratfunc method)": [[3, "pycarl.gmp.formula.SimpleConstraintRatFunc.rel"]], "relation (pycarl.cln.formula.constraint property)": [[3, "pycarl.cln.formula.Constraint.relation"]], "relation (pycarl.gmp.formula.constraint property)": [[3, "pycarl.gmp.formula.Constraint.relation"]], "to_smt2() (pycarl.cln.formula.constraint method)": [[3, "pycarl.cln.formula.Constraint.to_smt2"]], "to_smt2() (pycarl.cln.formula.formula method)": [[3, "pycarl.cln.formula.Formula.to_smt2"]], "to_smt2() (pycarl.gmp.formula.constraint method)": [[3, "pycarl.gmp.formula.Constraint.to_smt2"]], "to_smt2() (pycarl.gmp.formula.formula method)": [[3, "pycarl.gmp.formula.Formula.to_smt2"]], "type (pycarl.cln.formula.formula property)": [[3, "pycarl.cln.formula.Formula.type"]], "type (pycarl.gmp.formula.formula property)": [[3, "pycarl.gmp.formula.Formula.type"]], "value (pycarl.formula.formulatype property)": [[3, "pycarl.formula.FormulaType.value"]], "value (pycarl.formula.relation property)": [[3, "pycarl.formula.Relation.value"]], "parsererror": [[4, "pycarl.parse.ParserError"]], "deserialize() (in module pycarl.parse)": [[4, "pycarl.parse.deserialize"]], "pycarl.cln.parse": [[4, "module-pycarl.cln.parse"]], "pycarl.gmp.parse": [[4, "module-pycarl.gmp.parse"]], "pycarl.parse": [[4, "module-pycarl.parse"]]}})